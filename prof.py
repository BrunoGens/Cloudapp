# -*- coding: utf-8 -*-
"""
Created on Wed Nov  6 21:46:53 2024

@author: Bruno
"""

import openai
#from OpenAI_Completion import analyze_caption_with_chatgpt
from flask import Flask, request, jsonify
import requests
from io import BytesIO
from datetime import datetime, timedelta
import os
import json
#import azure.cognitiveservices.speech as speechsdk
from google.cloud import texttospeech
from FichesConversation import FichesConvers
import subprocess
import uuid
import traceback
import tempfile
import sys
from google.cloud import storage


sys.stdout.reconfigure(line_buffering=True)



MaintenanceMode=False
MaintenanceAutorized = ['33633861297']

Messages_id=[]

rep = "/Product/"
#rep = "Users/Bruno/OneDrive/0Bruno - DigUp/00 -  DigUp/04 - eCommerce/07 - Automatisation produits/02 - Product files/"
# Chat_save_dir = 'C:/Users/Bruno/OneDrive/0Bruno - DigUp/00 -  DigUp/04 - eCommerce/07 - Automatisation produits/03 - Chats/'
Chat_save_dir = '/Chat/'

memory = {}

BUCKET_NAME = "prof_lang_memory_bucket"
FICHIER = "FichierTest.txt"




OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WHATSAPP_API_TOKEN  = os.getenv("WHATSAPP_TOKEN")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
business_phone_number_id = os.getenv("PHONE_NUMBER_ID")
PROMPT_CONVERSATION = os.getenv("PROMPT_CONVERSATION")

WHATSAPP_API_URL = f"https://graph.facebook.com/v18.0/{business_phone_number_id}/messages"

# Initialiser l'API OpenAI
openai.api_key = OPENAI_API_KEY


# === CONFIGURATION AZURE (deprecated)===
SPEECH_KEY = os.getenv("SPEECH_KEY")
SERVICE_REGION = "francecentral"  # ex: "westeurope"


help_text = "Bonjour ! Je suis un chatbot con√ßu pour vous aider √† pratiquer votre langue. Voici comment je fonctionne : \n \
- Envoyez-moi des messages audio (vocaux) dans la langue que vous apprenez.\n \
- Je reformule vos phrases et vous aider √† am√©liorer votre expression.\n \
- Je vous renvoie une nouvelle question pour prolonger la conversation \n\n \
Voici quelques commandes suppl√©mentaires que vous pouvez utiliser : \n \
    * üëÖ tapez *.italien*, ou *.fran√ßais*, pour d√©finir /changer la langue d'apprentissage (aussi disponible : anglais, allemand, espagnol, ou chinois) \n \
    * üì¢ tapez *.audio_response_on* Si vous d√©sirez obtenir ma r√©ponse aussi sous forme de vocal (en + du texte),  (*.audio_response_off* pour d√©sactiver) \n \
    * üë®‚Äçüè´ tapez *.summary* pour obtenir une synth√®se de vos efforts d'apprentissage. \n \
    * üìú tapez *.story* pour cr√©er une histoire adapt√©e √† votre niveau de compr√©hension (travail compr√©hension orale) \n \
    * ‚ùî tapez *.help* pour afficher de nouveau cet aide"

langues = {
    'allemand': {'langue_apprentissage': 'de', 'langue_nom': 'allemand', 'code_langue': 'de-DE', 'google_language_code': 'de-DE', 'google_voice_name': 'de-DE-Wavenet-B','catchup_phrase': 'Hallo, wie geht es dir? Wie sind deine letzten Tage verlaufen? [√©crivez "stop" pour d√©sactiver ces messages]'},
    'italien': {'langue_apprentissage': 'it', 'langue_nom': 'italien', 'code_langue': 'it-IT', 'google_language_code': 'it-IT', 'google_voice_name': 'it-IT-Wavenet-C','catchup_phrase': 'Ciao, come stai? Come sono andati i tuoi ultimi giorni? [√©crivez "stop" pour d√©sactiver ces messages]'},
    'anglais': {'langue_apprentissage': 'en', 'langue_nom': 'anglais', 'code_langue': 'en-UK', 'google_language_code': 'en-GB', 'google_voice_name': 'en-GB-Wavenet-A','catchup_phrase': 'Hello, how are you? How have your last few days been? [√©crivez "stop" pour d√©sactiver ces messages]'},
    'espagnol': {'langue_apprentissage': 'es', 'langue_nom': 'espagnol', 'code_langue': 'es-ES', 'google_language_code': 'es-ES', 'google_voice_name': 'es-ES-Wavenet-A','catchup_phrase': 'Hola, ¬øc√≥mo est√°s? ¬øC√≥mo han sido tus √∫ltimos d√≠as? [√©crivez "stop" pour d√©sactiver ces messages]'},
    'chinois': {'langue_apprentissage': 'zh', 'langue_nom': 'chinois', 'code_langue': 'zh-CN', 'google_language_code': 'cmn-CN', 'google_voice_name': 'cmn-CN-Wavenet-A','catchup_phrase': '‰Ω†Â•ΩÔºå‰Ω†ÊÄé‰πàÊ†∑Ôºü‰Ω†ËøôÂá†Â§©ËøáÂæóÊÄé‰πàÊ†∑Ôºü [√©crivez "stop" pour d√©sactiver ces messages]'},
    'fran√ßais': {'langue_apprentissage': 'fr', 'langue_nom': 'fran√ßais', 'code_langue': 'fr-FR', 'google_language_code': 'fr-FR', 'google_voice_name': 'fr-FR-Wavenet-B','catchup_phrase': 'Bonjour, comment vas-tu ? Comment se sont pass√©s tes derniers jours ? [√©crivez "stop" pour d√©sactiver ces messages]'}
}

reference_texts = {
    'en-US': "The quick brown fox jumps over the lazy dog near the river bank at sunset",
    'fr-FR': "Le vif renard brun saute par-dessus le chien paresseux pr√®s de la berge au coucher du soleil",
    'en-UK': "The quick brown fox jumps over the lazy dog near the river bank at sunset",
    'it-IT': "La veloce volpe marrone salta sopra il cane pigro vicino alla riva al tramonto",
    'es-ES': "El r√°pido zorro marr√≥n salta sobre el perro perezoso cerca de la orilla al atardecer",
    'de-DE': "Der flinke braune Fuchs springt √ºber den faulen Hund in der N√§he des Flussufers bei Sonnenuntergang",
    'zh-CN': "ÊïèÊç∑ÁöÑÊ£ïËâ≤ÁãêÁã∏Âú®Êó•ËêΩÊó∂Ë∑≥ËøáÊ≤≥Â≤∏ÈôÑËøëÁöÑÊáíÁãó"
    # Ajoutez d'autres langues et phrases ici
}

# une variable globale pour indiquer que l'utilisateur doit uploader un vocal pour tester sa pronociation

audio_response_fields = {
    'audio_response_on': True,
    'audio_response_off': False,
}
prononciation_fields = {
    'prononciation_on': True,
    'prononciation_off': False,
}

lingua = 'italien'
langue_apprentissage = langues[lingua]['langue_apprentissage']
langue_nom = langues[lingua]['langue_nom']
langue_code = langues[lingua]['code_langue']
google_language_code = langues[lingua]['google_language_code']
google_voice_name = langues[lingua]['google_voice_name']

# === CONFIGURATION AZURE (deprecated)===
REFERENCE_TEXT = reference_texts.get(langue_code, "The quick brown fox jumps over the lazy dog")

# Configurer les points d'acc√®s API
WHISPER_ENDPOINT = 'https://api.openai.com/v1/audio/transcriptions'
CHATGPT_ENDPOINT = 'https://api.openai.com/v1/completions'


def upload_text(content, fichier):
    client = storage.Client()
    bucket = client.bucket(BUCKET_NAME)
    blob = bucket.blob(fichier)
    blob.upload_from_string(content)

def download_text(fichier):
    client = storage.Client()
    bucket = client.bucket(BUCKET_NAME)
    blob = bucket.blob(fichier)
    if not blob.exists():
        return ""
    return blob.download_as_text()

def append_text_to_file(fichier: str, new_content: str):
    client = storage.Client()
    bucket = client.bucket(BUCKET_NAME)
    blob = bucket.blob(fichier)

    # T√©l√©charger l'ancien contenu s'il existe
    if blob.exists():
        old_content = blob.download_as_text()
    else:
        old_content = ""

    # Ajouter le nouveau contenu √† la fin
    updated_content = old_content + new_content

    # R√©√©crire le fichier avec le contenu mis √† jour
    blob.upload_from_string(updated_content)

# Fonction pour afficher une phrase color√©e en fonction des scores des syllabes
def colorize_text_for_syllables(parsed_result):
    # Extraire les mots et syllabes
    text_with_colors = []
    
    for word in parsed_result['NBest'][0]['Words']:
        word_text = word['Word']
        
        # Parcours des syllabes dans chaque mot
        colored_syllables = []
        for syllable in word.get('Syllables', []):
            syllable_text = syllable['Syllable']
            syllable_score = syllable['PronunciationAssessment'].get('AccuracyScore', 0)
            
            # D√©terminer la couleur en fonction du score
            if syllable_score <= 30:
                color = 'red'
            elif syllable_score <= 75:
                color = 'orange'
            else:
                color = 'green'
            
            # Ajouter la syllabe color√©e
            colored_syllables.append(f'<span style="color:{color}">{syllable_text}</span>')
        
        # Ajouter les syllabes color√©es au mot, s√©par√©es par des espaces
        text_with_colors.append(' '.join(colored_syllables))
    
    # Joindre tous les mots avec un espace pour la phrase compl√®te
    return ' '.join(text_with_colors)


def set_lang(lang):
    global lingua
    lingua = lang
    global langue_apprentissage
    langue_apprentissage = langues[lang]['langue_apprentissage']
    global langue_nom
    langue_nom = langues[lang]['langue_nom']
    print(f"langue chang√©e pour {langue_nom}")


app = Flask(__name__)



def mark_as_read(message_id):
    access_token = WHATSAPP_API_TOKEN  # Remplacez par votre token d'acc√®s
    url = f"https://graph.facebook.com/v18.0/{business_phone_number_id}/messages"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "status": "read",
        "message_id": message_id
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        print("Message marqu√© comme lu.")
        return True
    else:
        print(f"Erreur lors du marquage du message comme lu : {response.status_code} - {response.text}")
        return False

# Dans la fonction webhook, apr√®s avoir extrait `phone_number` et `message_id` depuis `data`
# Remplacez `phone_number_id` et `access_token` par vos identifiants


def get_audio_url(media_id):
    url = f"https://graph.facebook.com/v18.0/{media_id}"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_API_TOKEN}"
    }
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        audio_data = response.json()
        return audio_data.get("url")
    else:
        print(f"Erreur lors de la r√©cup√©ration de l'URL audio: {response.status_code}")
        return None

def envoyer_texte_whatsapp(numero, message):
    """
    Envoie un message texte via WhatsApp.
    
    Args:
    - numero (str): Le num√©ro de t√©l√©phone du destinataire.
    - message (str): Le texte du message √† envoyer.
    """
    headers = {
        'Authorization': f'Bearer {WHATSAPP_API_TOKEN}',
        'Content-Type': 'application/json'
    }
    data = {
        "messaging_product": "whatsapp",
        "to": numero,
        "text": {"body": message}
    }
    response = requests.post(WHATSAPP_API_URL, headers=headers, json=data)
    memory[numero]['last_interaction'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # response.raise_for_status()  # V√©rifier que la requ√™te a r√©ussi


def uploader_audio_sur_facebook(ogg_buffer):
    url_upload = f"https://graph.facebook.com/v18.0/{business_phone_number_id}/media"
    headers = {
        'Authorization': f'Bearer {WHATSAPP_API_TOKEN}'
    }
    files = {
#        'file': ('contenuaudio.mp3', BytesIO(audio_content), 'audio/mpeg')  # Utiliser BytesIO pour simuler un fichier
        'file': ('voice.ogg', ogg_buffer, 'audio/ogg')
    }
    data = {
        "messaging_product": "whatsapp",
        "type": "audio"
    }

    response = requests.post(url_upload, headers=headers, files=files, data=data)

    if response.status_code == 200:
        media_id = response.json().get("id")
        print("Fichier audio upload√© avec succ√®s, ID du m√©dia:", media_id)
        return media_id
    else:
        print("Erreur lors de l'uploading du fichier audio.")
        print("Code d'erreur:", response.status_code)
        print("R√©ponse de l'API:", response.json())
        return None
    
def envoyer_audio_whatsapp_par_media_id(numero, media_id):
    headers = {
        'Authorization': f'Bearer {WHATSAPP_API_TOKEN}',
        'Content-Type': 'application/json'
    }

    data = {
        "messaging_product": "whatsapp",
        "to": numero,
        "type": "audio",
        "audio": {
            "id": media_id
        }
    }

    response = requests.post(WHATSAPP_API_URL, headers=headers, json=data)

    if response.status_code == 200:
        print("Message audio envoy√© avec succ√®s.")
    else:
        print("Erreur lors de l'envoi du message audio.")
        print("Code d'erreur:", response.status_code)
        print("R√©ponse de l'API:", response.json())


def envoyer_audio_whatsapp(recipient_number, audio_content):
    # Appel de la fonction pour t√©l√©charger le fichier audio
    media_id = uploader_audio_sur_facebook(audio_content)
    # V√©rifiez si l'upload a r√©ussi avant d'envoyer le message
    if media_id:
        envoyer_audio_whatsapp_par_media_id(recipient_number, media_id)


        
def transcribe_audio_from_url(file_url):
    # √âtape 1 : T√©l√©charger le fichier audio via l'API de WhatsApp
    headers_whatsapp = {
        'Authorization': f'Bearer {WHATSAPP_API_TOKEN}'
    }
    
    # Effectuer la requ√™te pour r√©cup√©rer le fichier audio depuis l'URL
    response_audio = requests.get(file_url, headers=headers_whatsapp)
    
    if response_audio.status_code != 200:
        raise Exception(f"Erreur de t√©l√©chargement du fichier audio: {response_audio.text}")
    
    # Sauvegarder temporairement le fichier audio
    with open("audio_temp.ogg", "wb") as audio_file:
        audio_file.write(response_audio.content)
    
    # √âtape 2 : Transcrire le fichier audio en utilisant l'API de transcription
    headers_openai = {
        'Authorization': f'Bearer {OPENAI_API_KEY}',
    }
    files = {
        'file': open("audio_temp.ogg", 'rb'),
        'model': (None, 'whisper-1')
    }
    
    response_transcription = requests.post(WHISPER_ENDPOINT, headers=headers_openai, files=files)
    
    # Supprimer le fichier temporaire apr√®s la transcription
#    os.remove("audio_temp.ogg")
    
    # V√©rifier le succ√®s de la transcription et retourner le texte
    if response_transcription.status_code == 200:
        return response_transcription.json()['text']
    else:
        raise Exception(f"Erreur de transcription: {response_transcription.text}")


def analyze_caption_with_chatgpt(prompt, content=""):

    response = openai.chat.completions.create(
        #model="gpt-5",
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": content},
            {"role": "user", "content": prompt}
        ],
        max_tokens=1500,
        n=1,
        stop=None,
        temperature=0.7,
    )
    # print("retour chatgpt: ")
    # print(response.choices[0].message.content.strip())
    ret = response.choices[0].message.content.strip()
    #print(ret)
    return ret


def synthesize_with_google(text, voice_name, language_code, output_filename="",
                           speaking_rate=1.0, pitch=0.0):
    client = texttospeech.TextToSpeechClient()

    synthesis_input = texttospeech.SynthesisInput(text=text)

    voice = texttospeech.VoiceSelectionParams(
        language_code=language_code,
        name=voice_name
    )

    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.LINEAR16,
        speaking_rate=float(speaking_rate),
        pitch=float(pitch)
    )

    response = client.synthesize_speech(
        input=synthesis_input,
        voice=voice,
        audio_config=audio_config
    )

    # Cr√©ation du fichier temporaire WAV
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as wav_file:
        wav_file.write(response.audio_content)
        wav_path = wav_file.name

    # Fichier temporaire OGG
    with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as ogg_file:
        ogg_path = ogg_file.name

    try:
        subprocess.run([
            "ffmpeg", "-y",
            "-i", wav_path,
            "-acodec", "libopus",
            "-ar", "48000",
            "-ac", "1",
            ogg_path
        ], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # Lire le fichier OGG en m√©moire
        with open(ogg_path, "rb") as f:
            ogg_buffer = BytesIO(f.read())
        ogg_buffer.name = "audio.ogg"

        # Sauvegarde locale si un chemin de sortie est fourni
        if output_filename:
            os.makedirs(os.path.dirname(output_filename), exist_ok=True)
            with open(output_filename, "wb") as out_file:
                out_file.write(ogg_buffer.getvalue())
            print(f"[Google TTS] Audio enregistr√© dans : {output_filename}")
        else:
            print("[Google TTS] Aucun enregistrement local demand√©.")

        return ogg_buffer

    finally:
        os.remove(wav_path)
        os.remove(ogg_path)


# --- Fonction de sauvegarde de la m√©moire ---
# def save_memory():
#     global memory
    
#     with open(Chat_save_dir+'memory.json', 'w') as f:
#         json.dump(memory, f)
        
def save_memory():
    global memory
    client = storage.Client()
    bucket = client.bucket(BUCKET_NAME)
    blob = bucket.blob("memory.json")

    # Convertir le dictionnaire en JSON
    json_data = json.dumps(memory)
    blob.upload_from_string(json_data, content_type='application/json')
        
# def load_memory():
#     global memory
#     try:
#         with open(Chat_save_dir + 'memory.json', 'r') as f:
#             memory = json.load(f)
#             #print(memory)
#         print("M√©moire charg√©e avec succ√®s.")
#     except FileNotFoundError:
#         memory = {}
#         print("Fichier memory.json introuvable, initialisation d'une m√©moire vide.")
#     except json.JSONDecodeError:
#         memory = {}
#         print("Erreur de lecture du fichier JSON, initialisation d'une m√©moire vide.")

def load_memory():
    global memory
    client = storage.Client()
    bucket = client.bucket(BUCKET_NAME)
    blob = bucket.blob("memory.json")

    try:
        if blob.exists():
            json_data = blob.download_as_text()
            memory = json.loads(json_data)
            print("M√©moire charg√©e avec succ√®s.")
        else:
            memory = {}
            print("Fichier memory.json introuvable, initialisation d'une m√©moire vide.")
    except json.JSONDecodeError:
        memory = {}
        print("Erreur de lecture du fichier JSON, initialisation d'une m√©moire vide.")


def get_file_path(stamp, phone_number):
    file_path = f"{Chat_save_dir}Professore {langue_nom}-Chat with {str(phone_number)}-{stamp}.txt"
    # print (f"File path ({stamp}: {file_path}")
    # print ("coucou")
    return file_path

def read_discussion(stamp, phone_number):
    file_path = get_file_path(stamp, phone_number)
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            script_content = file.read()
    else:
        return ""
    return script_content

# def add_to_context(entry,stamp, phone_number):
#     file_path = get_file_path(stamp,phone_number)
#     with open(file_path, 'a+', encoding='utf-8') as file:
#         file.write(entry)
#         file.write('\n')
#  #(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Restart server - Memory = empty"   

def add_to_context(entry,stamp, phone_number):
    file_path = get_file_path(stamp,phone_number)
    content = entry + "\n"
    append_text_to_file(file_path, content)

# def log_prononciation_html(text, phone_number):
#     # Chemin du fichier de sortie
#     output_file_path = Chat_save_dir + "Prononciation_Assessment"+phone_number+".html"
    
#     # Sauvegarde du texte coloris√© dans un fichier HTML
#     with open(output_file_path, "a+", encoding="utf-8") as file:
#         file.write(text)

#     print(f"R√©sultat sauvegard√© dans : {output_file_path}")    

#     # Afficher le texte color√© dans un format HTML
#     #print(colored_text)
def log_prononciation_html(text, phone_number):
    # Chemin du fichier de sortie
    output_file_path = Chat_save_dir + "Prononciation_Assessment"+phone_number+".html"
    
    append_text_to_file(output_file_path, text)

    print(f"R√©sultat prononciation sauvegard√© dans : {output_file_path}")    

    # Afficher le texte color√© dans un format HTML
    #print(colored_text)

# # --- Fonction d'√©valuation de prononciation ---
# def PronunciationEvaluation(REFERENCE_TEXT, language,audio_url,phone_number="###"):

#     print(f"Phrase de test : {REFERENCE_TEXT}")

#     #r√©cup√©ration du fichier et conversation au format attendu
#     headers_whatsapp = {
#         'Authorization': f'Bearer {WHATSAPP_API_TOKEN}'
#     }

#     response_audio = requests.get(audio_url, headers=headers_whatsapp)

#     if response_audio.status_code != 200:
#         raise Exception(f"Erreur de t√©l√©chargement du fichier audio: {response_audio.text}")

#     unique_id = str(uuid.uuid4())
#     original_filename = f"audio_temp_{unique_id}.mp3"
#     converted_filename = f"converted_{unique_id}.wav"

#     try:
#         # Sauvegarde temporaire de l'audio d'origine
#         with open(original_filename, "wb") as audio_file:
#             audio_file.write(response_audio.content)

#         # Conversion en wav (mono, 16kHz, s16)
#         ffmpeg_command = [
#             "ffmpeg", "-y", "-i", original_filename,
#             "-ar", "16000", "-ac", "1", "-sample_fmt", "s16",
#             converted_filename
#         ]
#         result = subprocess.run(ffmpeg_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
#         if result.returncode != 0:
#             raise Exception(f"Erreur de conversion avec ffmpeg : {result.stderr.decode()}")
            



#         speech_config = speechsdk.SpeechConfig(subscription=SPEECH_KEY, region=SERVICE_REGION)
#         audio_config = speechsdk.audio.AudioConfig(filename=converted_filename)  # Adjusted path
    
#         pron_config = speechsdk.PronunciationAssessmentConfig(
#             reference_text=REFERENCE_TEXT,
#             grading_system=speechsdk.PronunciationAssessmentGradingSystem.HundredMark,
#             # granularity=speechsdk.PronunciationAssessmentGranularity.Phoneme,
#             granularity=speechsdk.PronunciationAssessmentGranularity.Word,
#             enable_miscue=True
#         )
    
#         recognizer = speechsdk.SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)
#         pron_config.apply_to(recognizer)
    
#         print("√âvaluation de la prononciation en cours...")
    
#         result = recognizer.recognize_once()
#     finally:
#         print("done")
#     #     # Nettoyage des fichiers temporaires
#     #     for f in [original_filename, converted_filename]:
#     #         if os.path.exists(f):
#     #             os.remove(f)


#     if result.reason == speechsdk.ResultReason.RecognizedSpeech:
#         json_result = result.properties[speechsdk.PropertyId.SpeechServiceResponse_JsonResult]
#         parsed = json.loads(json_result)

#         # Appliquer la coloration sur la phrase
        
#         return parsed  # Renvoie le r√©sultat JSON pour un traitement ult√©rieur
#     else:
#         print(f"Erreur de reconnaissance : {result.reason}")
#         return None




def stop_contact(phone_number):
    memory[phone_number]['do_not_contact'] = True
    save_memory()  # Sauvegarder la m√©moire apr√®s modification
    print(f"User {phone_number} opted out of contact.")



def conversation(lingua, audio_url, phone_number):
    global memory
    langue_apprentissage = langues[lingua]['langue_apprentissage']
    langue_nom = langues[lingua]['langue_nom']
    #print("Mode pronciation",memory[phone_number]['prononciationMode'])

    transcription_text = transcribe_audio_from_url(audio_url)
    print(f"Transcription de l'audio : {transcription_text}")
    add_to_context(transcription_text, "PLAIN", phone_number)
    print("ModePrononciaion: ",memory[phone_number]['prononciationMode'])
    if (memory[phone_number]['prononciationMode']):
#        EVAL_TEXT = reference_texts.get(language, "The quick brown fox jumps over the lazy dog")
        evaluation_jspon = PronunciationEvaluation(transcription_text, langue_code,audio_url, phone_number)
        PROMPT = "voici l'output json de la fonction d'analyse du langage d'azure imagine que tu es un assistant d'apprentissage de langue : je veux que tu produises en retour un tres court paragraphe (3 4 bullet points maximum, ) qui mette en avant sur les principales syllabes, phonemes ou mots qui posent probl√®me. Donne des d√©tails (qualitatifs plut√¥t que quantitatifs, l'information sur le % de pr√©cision n'est pas tres instructif) si ils sont fournis : par exemple omission, insertion, en pr√©cisant ce que cela veut dire..). Commence par une phrase courte qui donne une synthese globale de la performance, en rapport avec les chiffres de synthese de l'√©valuation : "
        evaluation_assessment = f">> Evaluation de prononciation du texte *{transcription_text}*:\n"+ analyze_caption_with_chatgpt(PROMPT+str(evaluation_jspon), content="")
        print(evaluation_assessment)
        envoyer_texte_whatsapp(phone_number, evaluation_assessment)
        divider = str(datetime.now())+"<br>#####################################<br>"
        log_prononciation_html(divider + evaluation_assessment.replace('\n','<br>')+'<br>', phone_number)        
        colored_text = colorize_text_for_syllables(evaluation_jspon) +'<br><br>'
        log_prononciation_html(colored_text, phone_number)


    prompt_reformul = f"renvoie moi la version correcte en {langue_nom} de : {transcription_text} (notamment si il y a des mots qui sont dits en fran√ßaise, traduis-les. juste la phrase corrig√©e, n'ajoute rien d'autre avant et apr√®s)"
#    Context = f"Voici mes pr√©c√©dents messages dans cette conversation : \n {read_discussion('REFORMUL', phone_number)}\n et voici une liste de sujets de conversation possibles {FichesConvers}"
    Context = f"Voici mes pr√©c√©dents messages dans cette conversation : \n {read_discussion('REFORMUL', phone_number)}\n et voici une liste de sujets de conversation possibles {FichesConvers}"
    reformulation = analyze_caption_with_chatgpt(prompt_reformul)

    print(f"Phrase reformul√©e : {reformulation}")
    envoyer_texte_whatsapp(phone_number, f"Phrase reformul√©e : {reformulation}")        
    add_to_context(reformulation, "REFORMUL", phone_number)
    if (memory[phone_number]['prononciationMode']):
        audio_response = synthesize_with_google(transcription_text, google_voice_name, google_language_code,speaking_rate=0.7 )
        return "", audio_response
       
#    prompt = f"Agis comme un professeur de {langue_nom}. Ton but est d'avoir une conversation avec moi : {reformulation}"
    prompt = f"Ton but est d'avoir une conversation naturelle avec moi en {langue_nom}, adapt√©e √† mon niveau, et d‚Äôintroduire progressivement de nouveaux th√®mes vari√©s (vie quotidienne, actualit√©, culture, situations pratiques). voici ce que je viens de dire : {reformulation} √âvite de r√©p√©ter les m√™mes sujets. Pose-moi des questions ouvertes et rebondis sur mes r√©ponses."
    response = analyze_caption_with_chatgpt(prompt, content=Context)
#    print("coucou test1")

    add_to_context(reformulation, "REFORMUL", phone_number)
#    print("coucou test2")

    print(f"R√©ponse du professeur de {langue_nom} : {response}")
    if memory[phone_number]['create_audio_response']:
#        print("coucouaudioresponde")
        
        # def synthesize_with_google(text, filename, voice_name, language_code, speaking_rate=1.0, pitch=0.0):

        audio_response = synthesize_with_google(response, google_voice_name, google_language_code)
        return response, audio_response
    else:
        return response, None

def catch_escape_word(text, escape_symbol="."):
    if (text == ""):
        return ""
    elif (text[0] == escape_symbol):
        keyword = text.split()[0][1:]
        return keyword
    
log_msg_id_file = Chat_save_dir + "log_msg_id_ChatBot.txt"
# Lecture des message_id existants dans le fichier log
try :
    with open(log_msg_id_file, 'r') as file:
        Messages_id = [line.split()[1] for line in file]
except Exception as e:
    print (f"fichier {log_msg_id_file} non trouv√©, Messages_id =[]")   

def log_debug_summary(source_label, data):
    print(f"\n===== [{source_label}] Webhook re√ßu =====")
    print(f"Timestamp: {datetime.now().isoformat()}")
    print(f"User-Agent: {request.headers.get('User-Agent')}")
    print(f"IP: {request.remote_addr}")

    # Synth√®se structur√©e
    try:
        value = data['entry'][0]['changes'][0]['value']
        msg_list = value.get('messages')
        statuses = value.get('statuses')
        if msg_list:
            msg = msg_list[0]
            msg_type = msg.get('type', 'unknown')
            msg_id = msg.get('id', 'no_id')
            print(f"Type de message : {msg_type}")
            print(f"ID du message : {msg_id}")

            if msg_type == 'text':
                text = msg.get('text', {}).get('body', '')
                print(f"Contenu (texte) : {text[:50]}...")

            elif msg_type == 'button':
                payload = msg.get('button', {}).get('payload', '')
                print(f"Payload (bouton) : {payload[:50]}...")

            elif msg_type == 'interactive':
                inter = msg.get('interactive', {})
                payload = inter.get('button_reply', {}).get('id') or inter.get('list_reply', {}).get('id')
                print(f"Payload (interactive) : {payload[:50] if payload else 'None'}")

            elif msg_type == 'image':
                media_id = msg.get('image', {}).get('id', '')
                caption = msg.get('image', {}).get('caption', '')
                print(f"Image ID: {media_id}")
                print(f"L√©gende : {caption[:50]}...")

            else:
                print(f"Type de message non trait√© : {msg_type}")

        elif statuses:
            print("√âv√©nement de statut re√ßu")
        else:
            print("Aucun message ou statut trouv√© dans 'value'.")

    except Exception as e:
        print(f"Erreur dans le r√©sum√© structur√© : {e}")
        print(f"Payload brut tronqu√© : {str(data)[:300]}...")     

# --- Server webwook ---
@app.route('/')
def home():
    return "Bienvenue sur l'appli WhatsApp"

@app.route("/webhook", methods=["GET"])
def verify_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")

    print(f"Requ√™te re√ßue : mode={mode}, token={token}, challenge={challenge}")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        return challenge, 200  # TEXTE BRUT attendu par Meta
    else:
        return "Forbidden", 403
    
@app.route("/cron/recontacte", methods=["POST"])
# --- Fonction de recontact via WhatsApp ---
def recontact_users():
    today = datetime.now()
    NB_DAYS=0 # Par exemple, recontacter apr√®s X jours d'inactivit√©
    restricted_list = ['33633861297']
    print("Scan la base de num√©ros pour recontacte")
    for phone_number, user_data in memory.items():
        if (phone_number not in restricted_list):
            continue
        last_interaction = user_data.get('last_interaction', today)
        last_interaction_str = user_data.get('last_interaction')
        if last_interaction_str:
            try:
                # conversion string -> datetime (si ton format reste identique)
                last_interaction = datetime.strptime(last_interaction_str, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                print(f"‚ö†Ô∏è Format invalide pour {last_interaction_str}, on ignore")
                last_interaction = today
        else:
            last_interaction = today


        lingua = user_data.get('lingua', "italien")
        days_since_last_interaction = (today - last_interaction).days
        print(f"[{phone_number}] days since last interaction = {days_since_last_interaction}")
        if days_since_last_interaction >= NB_DAYS:  
            catchup_message = langues[lingua]['catchup_phrase']
            print(f"Sending catchup message {catchup_message} to {phone_number}")
            envoyer_texte_whatsapp(phone_number, catchup_message)
            save_memory()
            
            
            # google_voice_name = langues[lingua]['google_voice_name']
            # google_language_code = langues[lingua]['google_language_code']
            # synthesize_with_google(message, google_voice_name, google_language_code)
            # audio_file_path = os.path.join(rep, "recontact_message.mp3")
            # envoyer_audio_whatsapp(phone_number, audio_file_path)
#     return "OK", 200
    return "OK", 200


@app.route('/webhook', methods=['POST'])
def webhook():
    global memory
    try:
        data = request.get_json()
 #       log_debug_summary("HELLO", data)

        if not data or not isinstance(data, dict) or 'entry' not in data:
            print(f"Webhook ignor√© : bruit ou ping - data = {data}")
            return "√âv√©nement ignor√© (bruit)", 200

        changes = data['entry'][0].get('changes', [])
        if not changes:
            print("Pas de 'changes' dans le message, probablement un bruit")
            return "√âv√©nement ignor√© (pas de changement)", 200

        value = changes[0].get('value', {})
        
        # Statuts (accus√©s de r√©ception par ex.)
        if 'statuses' in value:
            print("Statut re√ßu, non trait√©")
            return "Statut ignor√©", 200

        # Aucun message r√©el
        if 'messages' not in value:
            print("Pas de messages pr√©sents, bruit")
            return "Aucun message √† traiter", 200

 
        try:
            phone_number = data['entry'][0]['changes'][0]['value']['messages'][0]['from']
            print(f"Num√©ro de t√©l√©phone: {phone_number}")
        except Exception as a:
            print(f"Exception {a} : payload was {data}")
            return "Erreur dans les donn√©es du message", 400
        try:
            message_id = data['entry'][0]['changes'][0]['value']['messages'][0]['id']
            print(f"Id du message: {message_id}")
            try:
                flag = mark_as_read(message_id)
                if flag == False: return "Message ignor√© (mauvais adressage ?)", 200
            except Exception as e:
                error_msg = str(e)
                print(f"Erreur lors du marquage du message comme lu : {error_msg}")
        except Exception as g:
            print(f"Exception {g} : unable to read message's id")
            return "Message ignor√© (IP illisble)", 200




            
        try:
            timestamp_str = data['entry'][0]['changes'][0]['value']['messages'][0]["timestamp"]  # e.g., "1712607227"
            timestamp_int = int(timestamp_str)
            message_datetime = datetime.fromtimestamp(timestamp_int)
            now = datetime.utcnow()
            
            print("time_stamp du message :", message_datetime)
        
            # Si le message a plus de 1 heure, on l'ignore
            if now - message_datetime > timedelta(hours=1):
                print(f"Message {message_id} trop ancien, ignor√©.")
                return "√âv√©nement ignor√©", 200
        except Exception as g:
            print(f"Exception {g} : unable to compare message's timestamp")
       
        try:
            if message_id in Messages_id:
                print(f"Message {message_id} d√©j√† re√ßu, >> ignor√©")
                return "Message d√©j√† re√ßu", 200
            else:
                # with open(log_msg_id_file, 'a') as file:
                #     timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                #     file.write(f"{timestamp} {message_id}\n")
                Messages_id.append(message_id)
        except Exception as g:
            print(f"Exception {g} : unable to read message's id")
            
        try:
            if(MaintenanceMode and not(phone_number in MaintenanceAutorized)):
                msg = "üößService en maintenance - Merci de revenir plus tard !üöß"
                print(msg)
                envoyer_texte_whatsapp(phone_number, msg)
                return "Site en maintenance", 200
        except Exception as g:
            print(f"Exception {g} : unable to read message's id")                
                
                
        try:
            message = data['entry'][0]['changes'][0]['value']['messages'][0]


            if phone_number not in memory:
                memory[phone_number] = {
                    'lingua': 'italien',
                    'create_audio_response': False,
                    'last_interaction': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), # Initialisation de la date de derni√®re interaction
                    'do_not_contact':False,
                    'prononciationMode' : False
                }
                envoyer_texte_whatsapp(phone_number, "tapez '.help' pour connaitre le fonctionnement")

            # Extraction des variables sp√©cifiques √† l'utilisateur
            lingua = memory[phone_number]['lingua']
            
# --- escape words ---

            if message.get('type') == 'text':
                message_text = message['text']['body']
                escape_word = catch_escape_word(message_text, '.')
                print(f"Escape word : {escape_word} ")

                if escape_word in langues:
                    response = f"Escape value capt√©e : {escape_word}, changement de langue pour {langues[escape_word]['langue_apprentissage']}"
                    l = langues[escape_word]['langue_nom']
                    memory[phone_number]['lingua'] = l
                    save_memory()
                    envoyer_texte_whatsapp(phone_number, response)
                    set_lang(l)
                elif escape_word in audio_response_fields:
                    memory[phone_number]['create_audio_response']= audio_response_fields[escape_word]
                    save_memory()
                    msg="change setting: 'create_audio_response' =" + str(memory[phone_number]['create_audio_response'])
                    print(msg)
                    envoyer_texte_whatsapp(phone_number, msg)
                elif escape_word in prononciation_fields:
                    memory[phone_number]['prononciationMode']= prononciation_fields[escape_word]
                    msg = "change setting: 'prononciationMode' =" + str(memory[phone_number]['prononciationMode'])
                    print(msg)
                    envoyer_texte_whatsapp(phone_number, msg)
                    save_memory()
                elif escape_word == "prononciation":
                    print("√âvaluation de prononciation demand√©e.")
                    PrononciationTestPhrase = reference_texts.get(langue_code, "The quick brown fox jumps over the lazy dog")
                    msg = f"*Exercice de Prononciation* : Merci d'uploader un vocal en lisant cette phrase :\n {PrononciationTestPhrase}"
                    envoyer_texte_whatsapp(phone_number, msg)
                    memory[phone_number]['prononciationMode'] = True                 
                elif escape_word == "stop":
                    stop_contact(phone_number)
                    save_memory()
                    envoyer_texte_whatsapp(phone_number, "Vous ne recevrez plus de messages.")
                elif escape_word == "help":
                    print ("escape word: help")
                    envoyer_texte_whatsapp(phone_number, help_text)
                elif escape_word == "story":
                    print("Escape word : '.story'")
                    PROMPT_Story = f"tu es un professeur de {langue_apprentissage} et je suis ton √©l√®ve. Sur la base de nos conversations ci-dessous et mon niveau, √©cris-moi une histoire en environ 200 mots, que je vais essayer de comprendre. Nous pourrons en parler ensuite.\n{read_discussion('REFORMUL', phone_number)}"
                    resp = analyze_caption_with_chatgpt(PROMPT_Story)
                    envoyer_texte_whatsapp(phone_number, resp)
                else:
                    msg = "Commande non reconnue, essayer .help"
                    print(msg)
                    envoyer_texte_whatsapp(phone_number, msg)

            audio_url = None
            if message.get('type') == 'audio':
                try:
                    audio_id = message['audio']['id']
                    audio_url = get_audio_url(audio_id)
                except KeyError as e:
                    print(f"KeyError : {e}")
                    return "Cl√© audio absente", 400

        except Exception as e:
            print(f"Exception : {e}")
            audio_url = None

        if audio_url is not None:
            reponse, audio_response = conversation(lingua, audio_url, phone_number)
            envoyer_texte_whatsapp(phone_number, reponse)
            if audio_response is not None:
                 
                envoyer_audio_whatsapp(phone_number, audio_response)

        save_memory()  # Sauvegarder la m√©moire √† chaque interaction
        return jsonify({"status": "message envoy√©"}), 200
    
        # recontact_users()

    except Exception as e:
        print("Erreur lors du traitement des donn√©es :")
        print(f"Type : {type(e).__name__}")
        print(f"Message : {e}")
        print("Traceback :")
        traceback.print_exc()
        return "Erreur interne", 500

if __name__ == '__main__':
    print("Re(start) Professore conversation")
    print ("Maintenance mode: ", MaintenanceMode)
    load_memory()
#    print(memory)
    recontact_users()
    app.run(host='0.0.0.0', port=8080)









